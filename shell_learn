shell 学习心得

一.shell脚本是怎样炼成的.
   
   1.首先,打开vim编辑器,在上面编写shell脚本程序(一般由linux命令,shell命令,控制结构组成)并保存为filename.sh.

   2.然后,在终端用 chmod +x(或者755) filename.sh 命令,让filename.sh文件具备可执行权限.
  
   3.最后,在终端输入filename.sh 即可运行刚刚编写好的脚本程序.

   <思考要点>  1.如何给脚本传递参数?   

     [利用位置参数]>>利用位置参数 ($0,$1,$2,$3,$4,$5...$n)-----> {位置参数必须是要从终端输入才可以用}

        举例: filename.sh 参数一 参数二 参数三 ... 

        这样就可以将参数通过终端传递给$n,然后在filename.sh 脚本中就会得到相应的参数,并执行程序.

           <filename.sh代码>  


#! /bin/bash 

echo "file name: $0"
echo "first parameter: $1"
echo "second parameter: $2"
echo "third parameter: $3"
echo "quoted values: $@"
echo "quoted values: $*"
echo "total number of parameter: $#"
echo "\"\$@\": " "$@"
echo "\"\$*\":" "$*"


     <$@与$*的区别> 都表示传递给函数或脚本的所有参数,不被双引号包含时,都以"$1" "$2"..."$n"的形式输出所有参数(类似c里面的数组).

                    当它们被双引号包含时,"$*"会将所有的参数作为一个整体,以"$1 $2 … $n"的形式输出所有参数；
                    
                    "$@" 会将各个参数分开，以"$1" "$2" … "$n" 的形式输出所有参数。

     [利用read命令]>> read 的常用方法.
    
                        -n(不换行) -p(提示语句) -n(字符个数) -t(等待时间) -s(不回显)
             
             1、基本读取
             
#!/bin/bash

echo -n "Enter your name:"   //参数-n的作用是不换行，echo默认是换行

read  name                   //从键盘输入

echo "hello $name,welcome to my program"     //显示信息

exit 0                       //退出shell程序。

//********************************

                由于read命令提供了-p参数，允许在read命令行中直接指定一个提示。

                所以上面的脚本可以简写成下面的脚本::

#!/bin/bash

read -p "Enter your name:" name

echo "hello $name, welcome to my program"

exit0
                  read后面的变量只有name一个，也可以有多个，这时如果输入多个数据
                 
                 则第一个数据给第一个变量，第二个数据给第二个变量，如果输入数据个数过多
                                                   
                 则最后所有的值都给第一个变量。如果太少输入不会结束。

//*****************************************
              2、计时输入.

                 使用read命令存在着潜在危险。脚本很可能会停下来一直等待用户的输入。如果无论是否输入数据脚本都必须继续执行，那么可以使用
                 
                 -t选项指定一个计时器。

-t选项指定read命令等待输入的秒数。当计时满时，read命令返回一个非零退出状态;

#!/bin/bash

if read -t 5 -p "please enter your name:" name

then 

    echo "hello $name ,welcome to my script"

else

    echo "sorry,too slow"

fi

exit 0

除了输入时间计时，还可以设置read命令计数输入的字符。当输入的字符数目达到预定数目时，自动退出，并将输入的数据赋值给变量。

#!/bin/bash

read -n1 -p "Do you want to continue [Y/N]?" answer

case $answer in

Y | y)

      echo "fine ,continue";;

N | n)

      echo "ok,good bye";;

*)

     echo "error choice";;

esac

exit 0

该例子使用了-n选项，后接数值1，指示read命令只要接受到一个字符就退出。只要按下一个字符进行回答，read命令立即

接受输入并将其传给变量。无需按回车键。

 

3、默读（输入不显示在监视器上）

有时会需要脚本用户输入，但不希望输入的数据显示在监视器上。典型的例子就是输入密码，当然还有很多其他需要隐藏的数据。

-s选项能够使read命令中输入的数据不显示在监视器上（实际上，数据是显示的，只是read命令将文本颜色设置成与背景相同的颜色）。

#!/bin/bash

read  -s  -p "Enter your password:" pass

echo "your password is $pass"

exit 0 

4、读文件

最后，还可以使用read命令读取Linux系统上的文件。

每次调用read命令都会读取文件中的"一行"文本。当文件没有可读的行时，read命令将以非零状态退出。

读取文件的关键是如何将文本中的数据传送给read命令。

最常用的方法是对文件使用cat命令并通过管道将结果直接传送给包含read命令的while命令

例子::

#!/bin/bash

count=1    //赋值语句，不加空格

cat test | while read line        //cat 命令的输出作为read命令的输入,read读到的值放在line中

do

   echo "Line $count:$line"

   count=$[ $count + 1 ]          //注意中括号中的空格。

done

echo "finish"

exit 0




二.{shell中常见的循环和控制结构}
  
  1.[for循环的用法]>>> for 循环的一般用法如下:

        for 变量 in 列表
        do
           commands
        done

      <注意> 1.for循环每次会从列表中取出一个值赋值给变量(列表中的值以空格分开)

             例如:如果执行下面这个脚本的话,显示信息会把ls显示出的信息按照单词来每个都显示一遍(因为ls -l 所显示的内容是以空格分开的)
#! /bin/bash 

for loop in `ls -lt /bin | grep "\<less\>*" ` //反引号里的命令执行结果作为列表内容传递给变量
do
    echo "The value is: $loop"

done

      <for循环还可以像c语言里一样的用法> 

      for((i=1;i<n;i++))  //注意for的这种用法最好用双括号条件,不然易出错
      do 
         commands
      done

  2.[while循环的用法]     //条件为真时执行commands
    
        while test commands
      
        do 
          commands
   
        done

  3.[until循环的用法]     //条件为假时执行commands 跟while的用法刚好相反

        until test commands

        do 
          commands
        done

/////////////////////////////////补充   分别用几种循环语句计算从1到100的和,代码分别如下:///////////////////////////////////////////


#! /bin/bash     
sum=0

for ((i=1;i<101;i++))  //此处测试条件要用双括号括起来,否则会报错  因为条件里有三个语句
do
    let sum=$i+$sum    // let计算的时候,只能计算整数
    
done
    echo "The summary is $sum"



#! /bin/bash 
sum=0
for i in `seq 1 100`   //用反引号把命令输出作为for的列表  seq 1 表示从某个区间取整数
do 
    sum=$[ $sum + $i ]  //用$[]求值时,注意中间要有空格
done
echo "The summary is: $sum"



#! /bin/bash 

sum=0
i=1
while [ $i -le 100 ]  // 注意测试条件里的选项-eq(equal) -ne(not equal) -lt(lower than)
do                       // -le(lower or equal) -gt(greather than) -ge(greater or equali)
    let sum=$i+$sum
    let i=$i+1
done
echo "The summary is: $sum"



#! /bin/bash 
i=1
sum=0
until [ $i -gt 100 ] //测试条件与while相反,而且注意这里要用-gt(如果用-ge的话,会导致100这个值会取不到)
do
    let sum=$sum+$i
    let i=$i+1
done
echo "The summary is: $sum"
////////////////////////////////////////循环结构,补充完毕////////////////////////////////////////////////////////////////

4.[if 选择结构]

     1.if test commands

       then
           
           commands

       fi 

     2.if test commands1

       then
          
           commands1

       elif test commands2

       then 

           commands3

       elif test commands4

       then

           commands4

      ...

      fi 

5.[select]  //select的作用是自动生成一个带序号的列表,选项值分别是列表中的值

     select 变量 in 列表(表值之间用空格分开)
    do
       break
   done
      (实例代码如下):



6.[case分支结构] //pattern值会分别与变量所接受到的值[由用户输入]进行匹配,从而决定到底执行哪个分支结构

     case  变量 in

        pattern1)
             commands1
             ;;
        pattern2)
             commands2  //pattern的值最好用双引号,养成良好的编程习惯
             ;;
        pattern3)
             commands3
             ;;
        ...
        *)       // 最后一般要用*匹配符进行扫尾工作,意即如果前面的都不能匹配则进行报错处理
             commands
             ;;  //千万注意,*一定要放到最后,否则分支结构会到此停止
     esac

////////////////////////关于case和select的练习用代码如下://////////////////////////////////////////////

#! /bin/bash 

#首先用户选择加减乘除,然后依次输入两个数,完成相应的计算.
echo "请选择你要做的运算: "
select ch in "+" "-" "*" "/"   //执行select语句,会给出一个包含加减乘除的菜单供用户选择
do
    break
done
read -p "请依次输入两个整数: " num1 num2
case $ch in    //注意啊！case这里的列表值都加上双引号，因为case匹配的就是字符串啊!!!
    "+")
        let sum=$num1+$num2
        echo "这两个数的和是: $sum"
        ;;
    "-")
        let sum=$num1-$num2
        echo "这两个数的差是: $sum"
        ;;
    "*") //  一定要注意，这个地方要加双引号  因为*是通配符，程序执行到这就停止了
        let sum=$num1*$num2
        echo "这两个数的商是: $sum"
        ;;
    "/")
        let sum=$num1/$num2
        echo "这两个数的商是: $sum"
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|}"
        exit 1
        ;;
esac

///////////////////////////////////////练习代码完/////////////////////////////////////////////////




